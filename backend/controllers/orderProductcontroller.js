const OrderProduct = require('../models/OrderProduct')
const OrderProductDetail = require('../models/OrderProductDetail');
const Product = require('../models/Product');

exports.getOrderProduct = async (req , res)=>{
    try{
        const orderproduct = await OrderProduct.find()
            .populate('chef_Id') 

        res.status(200).json(
            orderproduct
        );

    }catch(error){
        console.log("Error feching orderproduct",error);
    res.status(500).json({
        'message':'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏û‡πÄ‡∏ß‡∏≠‡∏£‡πå',
        error: error.message
    });

    };
};

exports.createOrderProduct = async (req , res)=>{
    const {chef_Id} = req.body;
    console.log(req.body)
    console.log(chef_Id)
    try{
        let orderproduct = new OrderProduct({
            chef_Id: chef_Id,
            order_Status: "Pending"        
        })
        await orderproduct.save()
        res.status(200).json({
            'message': '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        })

    }catch(error){
        console.log("Error create orderproduct new", error)
        res.status(500).json({
            'message':'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        })

    }
}

exports.deleteOrderProduct = async (req , res) =>{
    const {id} = req.params
    try{
        const orderproduct = await OrderProduct.findById(id)
        if(!orderproduct){
            res.status(404).json({'message': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'})
        }else{
            await OrderProduct.deleteOne()
            res.status(200).json({'message': '‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'})
        }
    }catch(error){
        console.log('Error delete Data OrderProduct', error)
        res.status(500).json({
            'message': '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏û‡πÄ‡∏ß‡∏≠‡∏£‡πå'
        })

    }
}

exports.getOrderProductDetail = async (req,res)=>{
    const {id} = req.params
    try{
        const orderProductDetail = await OrderProductDetail.find({orderproduct_Id: id})
            .populate("product_Id")
            .populate("orderproduct_Id");

        const product = await Product.find();

        if(orderProductDetail.length === 0){
            res.status(404).json({
                message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
                orderProductDetail,
                product
            })
        }else{
            res.status(200).json({
                message: '‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
                orderProductDetail,
                product
                
            })
        }
    }catch(error){
        res.status(500).json({
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        })
    }
}


exports.createOrderProductDetails = async (req, res)=>{
    const {order_Quantity, order_Detail, product_Id, orderproduct_Id} = req.body
    console.log(req.body)
    try{
        let createOrderProduct = new OrderProductDetail({
            order_Quantity: order_Quantity,
            order_Detail: order_Detail,
            product_Id: product_Id,
            orderproduct_Id: orderproduct_Id
        })

        await createOrderProduct.save()
        res.status(200).json({
            message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        })
    }catch(erorr){
        console.log("Error add data OrderPoduct Details" ,erorr)
        res.status(500).json({
            message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
        })
    }
}

exports.updateOrderProductDetails = async (req, res) => {
    const { id } = req.params;
    const { order_Quantity, order_Detail, product_Id, orderproduct_Id } = req.body;

    console.log("Request Body:", req.body);

    try {
        // üîπ ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ OrderProductDetail ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà OrderProduct
        const orderProductDetail = await OrderProductDetail.findById(id);

        if (!orderProductDetail) {
            return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå" }); // üîπ return ‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏•‡∏¢
        }

        // üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
        orderProductDetail.order_Quantity = order_Quantity;
        orderProductDetail.order_Detail = order_Detail;
        orderProductDetail.product_Id = product_Id;
        orderProductDetail.orderproduct_Id = orderproduct_Id;

        await orderProductDetail.save();

        res.status(200).json({ message: "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", orderProductDetail });

    } catch (error) {
        console.error("Error update data in server", error); // üîπ ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠ error ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å
        res.status(500).json({
            message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
            error: error.message, // üîπ ‡∏™‡πà‡∏á error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
        });
    }
};

exports.deleteOrderProductDetail = async (req, res)=>{
    const {id} = req.params
    try{
        const orderproductdetail = await OrderProductDetail.findByIdAndDelete(id);

        if(!orderproductdetail){
            res.status(404).json({
                message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö'
            })
        }
        res.status(200).json({
            message: '‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
        })
    }catch(error){
        console.log("Error delete data order product detail")
    }
}

//
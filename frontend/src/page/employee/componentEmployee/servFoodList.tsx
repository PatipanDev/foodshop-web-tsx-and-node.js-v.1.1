import React, { Suspense, useState, useEffect } from 'react';
import { Box, Grid, Card, CardContent, Typography, Button, Divider } from '@mui/material';

import socket from '../../../utils/socket';

// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
const orderData = [
  {
    orderId: '12345',
    foodName: 'Pad Thai',
    details: 'Spicy Thai noodles',
    quantity: 2,
    cookingStatus: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥',
    servingStatus: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û',
    server: 'John Doe',
    orderTime: '2025-03-23 14:30',
  },
  {
    orderId: '12346',
    foodName: 'Green Curry',
    details: 'Creamy coconut curry',
    quantity: 1,
    cookingStatus: '‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß',
    servingStatus: '‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û‡πÅ‡∏•‡πâ‡∏ß',
    server: 'Jane Doe',
    orderTime: '2025-03-23 15:00',
  },
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
];

const ServFoodList: React.FC = () => {
    const [foodready, setFoodReady] = useState<any[]>([]);

    useEffect(() => {
      // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket
      socket.connect();
      // ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
      if (socket.connected) {
        socket.emit('getFoodReady');
        console.log("==>Socket connected");
      } else {
        console.error("Socket is not connected!");
      }
  
      socket.on('dataFoodReady', (Serving) => {
        console.log('üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', Serving);
        if (Serving) {
          setFoodReady(Serving);
        } else {
          console.error("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÉ‡∏´‡∏°‡πà");
        }
      });
      
    }, []);


  return (
    <Box sx={{ padding: 2 }}>
      <Grid container spacing={2}>
        {orderData.map((order, index) => (
          <Grid item xs={12} key={index}>
            <Card>
              <CardContent>
                <Typography variant="h6" gutterBottom>
                  ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {order.orderId}
                </Typography>
                <Typography variant="body1">‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£: {order.foodName}</Typography>
                <Typography variant="body2" color="text.secondary">
                  ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: {order.details}
                </Typography>
                <Typography variant="body2">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {order.quantity}</Typography>
                <Typography variant="body2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£: {order.cookingStatus}</Typography>
                <Typography variant="body2">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û: {order.servingStatus}</Typography>
                <Typography variant="body2">‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û: {order.server}</Typography>
                <Typography variant="body2">‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: {order.orderTime}</Typography>

                <Divider sx={{ my: 2 }} />

                <Button
                  variant="contained"
                  color="primary"
                  sx={{ width: '100%' }}
                  disabled={order.servingStatus === '‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û‡πÅ‡∏•‡πâ‡∏ß'}
                >
                  ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏™‡∏¥‡∏£‡πå‡∏û
                </Button>
              </CardContent>
            </Card>
          </Grid>
        ))}
      </Grid>
    </Box>
  );
};

export default ServFoodList;

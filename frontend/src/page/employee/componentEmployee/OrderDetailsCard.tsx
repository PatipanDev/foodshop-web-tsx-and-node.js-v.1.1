import React, { Suspense, useState, useEffect } from 'react';
import { Card, CardContent, Typography, Box, Button, Divider, Grid } from '@mui/material';
import OrderDetailsCheck from './OrderDetailsCheck';

import socket from '../../../utils/socket';
// ‡∏ü‡∏±‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å server
import { formatDateTime } from '../../../utils/formatDateTime';


const OrderDetailsCard = () => {
  const [orders, setOrders] = useState<any[]>([]);
  const [selectedOrderId, setSelectedOrderId] = useState<string | null>(null);

  useEffect(() => {
    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ socket
    socket.connect();
    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠ socket ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏´‡πâ‡∏≠‡∏á
    socket.emit('joinRoom', 'order');  // ‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°
    console.log(`Client joined room: roomName`);

    // ‡∏Ç‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    socket.emit('get_latest_order');

    // ‡∏ü‡∏±‡∏á event `new_order_for_staff`
    socket.on('new_order_for_staff', (latestOrders) => {
      console.log('üì¶ ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö:', latestOrders);
      setOrders(latestOrders);
    });

    // Cleanup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ component ‡∏ñ‡∏π‡∏Å unmount
    return () => {
      setTimeout(() => {
        socket.off('new_order_for_staff'); // ‡∏´‡∏¢‡∏∏‡∏î‡∏ü‡∏±‡∏á event
        socket.disconnect(); // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        console.log("üî¥ Socket disconnected");
      }, 10000); // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (5000 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
    };
  }, []);

  const handleOpenClick = (drinkId: string) => {
    setSelectedOrderId(drinkId); // ‡πÄ‡∏õ‡∏¥‡∏î Modal ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤
  };
  const handdlecloseDetail = () => {
    setSelectedOrderId(null); // ‡∏õ‡∏¥‡∏î Modal
  };

  return (
    <div>
      {selectedOrderId ? (
        <div>
          {selectedOrderId && <OrderDetailsCheck _id={selectedOrderId} onClose={handdlecloseDetail} />}
        </div>
      ) : (
        <Grid item xs={12} sm={6} md={4}>
          <Card elevation={3} sx={{ borderRadius: 2 }}>
            {orders.map((order) => {
              const { formattedDate, formattedTime } = formatDateTime(order.createdAt);
              return (
                <CardContent key={order._id} onClick={() => handleOpenClick(order._id)}>
                  <Typography variant="h6" gutterBottom color="primary" sx={{ fontWeight: 'bold' }}>
                    ‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: #{order._id.substring(0, 6)}
                  </Typography>
                  <Typography variant="body1" gutterBottom>‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: {order.customer_Id.customer_Name}</Typography>
                  <Typography variant="body1" gutterBottom>‡∏™‡∏±‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠: ‡πÄ‡∏ß‡∏•‡∏≤ {formattedTime} ‡∏ô.  ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {formattedDate}</Typography>
                  <Typography variant="body1" gutterBottom>‡πÇ‡∏ï‡πä‡∏∞: {order.table_Id.number} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á {order.table_Id.seat_count}</Typography>

                  {/* ‡∏õ‡πà‡∏∏‡∏°‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤ */}
                  <Box sx={{ marginTop: 2, display: 'flex', justifyContent: 'flex-end' }}>
                    <Button variant="contained" color="primary" sx={{ marginRight: 2 }}>‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</Button>
                    <Button variant="contained" color="secondary">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠</Button>
                  </Box>
                </CardContent>
              )

            })}

          </Card>
        </Grid>)}
    </div>
  );
};

export default OrderDetailsCard;

import React, { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { Box, Container, CssBaseline, TextField, Button, Typography } from "@mui/material";
import { Link , useNavigate }from "react-router-dom";
import axios from "axios";
import WarningAlert from "../components/AlertDivWarn";
import SuccessAlert from "../components/AlertSuccess";

// üü¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏∞‡∏™‡πà‡∏á
interface RegisterFormInputs {
  username: string;
  email: string;
  phone: string;
  password: string;
}

const Register = () => {
  const navigate = useNavigate(); 
  const { register, handleSubmit, formState: { errors }, reset } = useForm<RegisterFormInputs>(); // üéØ ‡πÉ‡∏ä‡πâ react-hook-form
  const [alertMessage, setAlertMessage] = useState<React.ReactNode | null>(null);
 const [alertSuccess, setAlertSuccess] = useState<React.ReactNode | null>(null);
  // üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const onSubmit: SubmitHandler<RegisterFormInputs> = async (data) => {
    try {
      console.log("Sending data:", data);
      const response = await axios.post("http://localhost:3000/api/auth/register", {
        customer_Name: data.username,
        customer_Email: data.email,
        customer_Password: data.password,
        customer_Telnum: data.phone,
      });

      console.log("Registration Successful", response.data);
     
      setAlertSuccess(<div>‚úÖ ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</div>);

      setTimeout(() => {
        navigate("/login"); 
      }, 2000);

      // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
      reset();
    } catch (error: any) {
      console.error('Error:', error);
      if (error.response) {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏°‡∏µ error (‡πÄ‡∏ä‡πà‡∏ô 400, 500)
        setAlertMessage(<div>{error.response.data.message}</div>);
        // setAlertMessage(<div>{String(error.response.data)}</div>);
    } else if (error.request) {
        // ‡∏Å‡∏£‡∏ì‡∏µ request ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö response (‡πÄ‡∏ä‡πà‡∏ô server ‡∏•‡πà‡∏° ‡∏´‡∏£‡∏∑‡∏≠ network error)
        console.error('Request error:', error.request);
        setAlertMessage(<div>Server did not respond. Please try again later.</div>);
    } else {
        // ‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô axios ‡πÄ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ request ‡∏ú‡∏¥‡∏î)
        console.error('Error message:', error.message);
        setAlertMessage(<div>{error.message}</div>);
    }
    }

  };

  return (
    <React.Fragment>
      <CssBaseline />
      <Container fixed style={{ display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", height: "100vh" }}>
        <Box
          component="form"
          sx={{
            "& .MuiTextField-root": { m: 2, width: "28ch" },
            padding: 4,
            borderRadius: 2,
            boxShadow: 3,
            maxWidth: 300,
            margin: "0 auto",
          }}
          noValidate
          autoComplete="off"
          onSubmit={handleSubmit(onSubmit)}
        >
          <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", m: 2 }}>
            <Typography variant="h5" gutterBottom fontWeight={800}>
              ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            </Typography>

            <TextField
              label="‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"
              type="text"
              {...register("username", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" })}
              error={!!errors.username}
              helperText={errors.username?.message}
            />
            <TextField
              label="‡∏≠‡∏µ‡πÄ‡∏°‡∏•"
              type="email"
              {...register("email", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•", pattern: { value: /^\S+@\S+\.\S+$/, message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" } })}
              error={!!errors.email}
              helperText={errors.email?.message}
            />
            <TextField
              label="‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
              type="tel"
              {...register("phone", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" })}
              error={!!errors.phone}
              helperText={errors.phone?.message}
            />
            <TextField
              label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              type="password"
              {...register("password", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", minLength: { value: 6, message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£" } })}
              error={!!errors.password}
              helperText={errors.password?.message}
            />
          </Box>

          <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", m: 2 }}>
            <Button variant="contained" type="submit" color="primary" sx={{ width: "25ch" }}>
              ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
            </Button>

            <Link to="/login" style={{ textDecoration: "none", marginTop: "10px" }}>
              <Button variant="text" color="secondary">
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
              </Button>
            </Link>
          </Box>
        </Box>

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à */}
        <WarningAlert messagealert={alertMessage} />
        <SuccessAlert successalert={alertSuccess}/>
      </Container>
    </React.Fragment>
  );
};

export default Register;
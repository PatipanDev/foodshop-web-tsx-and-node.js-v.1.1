const API_URL = import.meta.env.VITE_API_URL;

import React, { useState } from "react";
import { useForm, SubmitHandler } from "react-hook-form";
import { Box, Container, CssBaseline, TextField, Button, Typography } from "@mui/material";
import { Link, useNavigate } from "react-router-dom";
import axios from "axios";
import InputLabel from '@mui/material/InputLabel';
import FormControl from '@mui/material/FormControl';
import NativeSelect from '@mui/material/NativeSelect';
import WarningAlert from "../components/AlertDivWarn";
import SuccessAlert from "../components/AlertSuccess";
// import LoginEmployee from './LoginEmployee';

axios.defaults.withCredentials = true; 

interface LoginProps {
  setAuth?: (auth: boolean) => void;
}

// üü¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏à‡∏∞‡∏™‡πà‡∏á
interface LoginFormInputs {
  name: string; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
  password: string;
  role: string;  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
}

const LoginEmployee: React.FC<LoginProps> = ({ setAuth }) => {
  const navigate = useNavigate();
  const { register, handleSubmit, formState: { errors }} = useForm<LoginFormInputs>(); // üéØ ‡πÉ‡∏ä‡πâ react-hook-form
  const [alertMessage, setAlertMessage] = useState<React.ReactNode | null>(null);
  const [alertSuccess, setAlertSuccess] = useState<React.ReactNode | null>(null);

  // üü¢ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
  const onSubmit: SubmitHandler<LoginFormInputs> = async (data) => {
    const { name, password, role } = data;
    // console.log(data)

    try {
      const response = await axios.post(`${API_URL}/api/auth/loginemployee`, {
        employee_Name: name,  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        employee_Password: password,
        employee_Role: role,  // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      },{withCredentials: true});

      console.log("üìå Response ‡∏à‡∏≤‡∏Å API:", response.data); // ‚úÖ Debug ‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ

      if (response.data.success) {
        //‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö
        const userRole = response.data.user.role;
        localStorage.setItem('user', JSON.stringify(response.data.user));

        setAlertSuccess(<div>‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢</div>);

        setAuth?.(true);
        //‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ
        const dashboardRoutes: Record<string, string> = {
          chef: '/DashboardChef',
          cashier: '/order',
          employee: '/profile',
          owner: '/DashboardOwner'
        };

        setTimeout(() => {
          navigate(dashboardRoutes[userRole] || '/home'); // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ role ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏à‡∏∞‡∏û‡∏≤‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ home
        }, 2000);
      } else {
        console.warn("Login ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
      }
    } catch (error: any) {
      console.error('Error:', error);
      if (error.response) {
        setAlertMessage(<div>{error.response.data.message}</div>);
      } else if (error.request) {
        setAlertMessage(<div>Server ‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</div>);
      } else {
        setAlertMessage(<div>{error.message}</div>);
      }
    }
  };

  return (
    <React.Fragment>
      <CssBaseline/>
      <Container fixed style={{ display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center", height: "100vh" }}>
        <Box
          component="form"
          sx={{
            "& .MuiTextField-root": { m: 2, width: "28ch" },
            padding: 4,
            borderRadius: 2,
            boxShadow: 3,
            maxWidth: 300,
            margin: "0 auto",
          }}
          noValidate
          autoComplete="off"
          onSubmit={handleSubmit(onSubmit)}
        >
          <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", m: 2 }}>
            <Typography variant="h5" gutterBottom fontWeight={800}>
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
            </Typography>

            <TextField
              label="‡∏ä‡∏∑‡πà‡∏≠" // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "‡∏≠‡∏µ‡πÄ‡∏°‡∏•" ‡πÄ‡∏õ‡πá‡∏ô "‡∏ä‡∏∑‡πà‡∏≠"
              type="text"  // ‡πÉ‡∏ä‡πâ type="text" ‡πÅ‡∏ó‡∏ô "email"
              {...register("name", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠" })} // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "email" ‡πÄ‡∏õ‡πá‡∏ô "name"
              error={!!errors.name} // ‡πÉ‡∏ä‡πâ "name" ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö error
              helperText={errors.name?.message}
            />
            <TextField
              label="‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"
              type="password"
              {...register("password", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" })}
              error={!!errors.password}
              helperText={errors.password?.message}
            />
          </Box>

          <Box sx={{ minWidth: 120 }}>
            <FormControl fullWidth>
              <InputLabel variant="standard" htmlFor="uncontrolled-native">
                ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
              </InputLabel>
              <NativeSelect
                defaultValue={1}
                {...register("role", { required: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á" })}
                inputProps={{
                  name: 'role',
                  id: 'uncontrolled-native',
                }}
              >
                <option value={"employee"}>‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô</option>
                <option value={"cashier"}>‡πÅ‡∏Ñ‡∏ä‡πÄ‡∏ä‡∏µ‡∏¢‡∏£‡πå</option>
                <option value={"chef"}>‡πÄ‡∏ä‡∏ü</option>
                <option value={"owner"}>‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏£‡πâ‡∏≤‡∏ô</option>
              </NativeSelect>
            </FormControl>
          </Box>

          <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", m: 2 }}>
            <Button variant="contained" type="submit" color="primary" sx={{ width: "25ch" }}>
              ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
            </Button>
            <Link to="/login" style={{ textDecoration: "none", marginTop: "10px" }}>
              <Button variant="text" color="secondary">
                ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
              </Button>
            </Link>
          </Box>
        </Box>

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à */}
        <WarningAlert messagealert={alertMessage} />
        <SuccessAlert successalert={alertSuccess}/>
      </Container>
    </React.Fragment>
  );
};

export default LoginEmployee;
